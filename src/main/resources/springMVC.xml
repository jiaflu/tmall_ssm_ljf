<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

    <!-- 启动注解的识别 -->
    <context:annotation-config/>

    <!--自动扫描该包，使SpringMVC认为包下用了@Controller注解的类是控制器-->
    <context:component-scan base-package="com.ljf.tmall.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--配置映射器与适配器-->

    <!--因为<mvc:annotation-driven/>是用来配置RequestMappingHandlerMapping和RequestMappingHandlerAdapter两个bean，
    前者用于将URL映射到@RequestMapping注解的方法上，后者用于处理@Controller；
    但是不进行配置也没关系，不进行配置的话springMVC会自动加载DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter，也能处理*.do请求，
    但是现在这两个组件已经被官方标记为过时了，不推荐使用
    -->
    <mvc:annotation-driven />

    <!-- 开通静态资源的访问 -->
    <!-- html是静态文件，需在springMVC.xml中添加如下静态解析方法才能访问到-->
    <mvc:default-servlet-handler />

    <!-- 视图定位 -->
    <!--定义跳转的文件的前后缀，视图模式配置-这里的配置个人理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址-->
    <!-- 方法参数能够被ViewResolver修改 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <!-- 把视图约定在 /WEB-INF/jsp/*.jsp 位置 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 对上传文件的解析 :开放上传功能的支持 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

    <!--拦截器配置-->
    <mvc:interceptors>
        <!--登入状态拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/fore*"/>
            <bean class="com.ljf.tmall.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
        <!--其他拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/fore*"/>
            <bean class="com.ljf.tmall.interceptor.OtherInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>
